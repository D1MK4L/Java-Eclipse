-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema SchoolDBPro
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema SchoolDBPro
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SchoolDBPro` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `SchoolDBPro` ;

-- -----------------------------------------------------
-- Table `SchoolDBPro`.`CITIES`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SchoolDBPro`.`CITIES` ;

CREATE TABLE IF NOT EXISTS `SchoolDBPro`.`CITIES` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `CITY` VARCHAR(45) NULL,
  PRIMARY KEY (`ID`),
  INDEX `CITY_IDX` (`CITY` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SchoolDBPro`.`USERS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SchoolDBPro`.`USERS` ;

CREATE TABLE IF NOT EXISTS `SchoolDBPro`.`USERS` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `USERNAME` VARCHAR(45) NOT NULL,
  `PASSWORD` VARCHAR(256) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `USERNAME_UNIQUE` (`USERNAME` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SchoolDBPro`.`STUDENTS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SchoolDBPro`.`STUDENTS` ;

CREATE TABLE IF NOT EXISTS `SchoolDBPro`.`STUDENTS` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `FIRSTNAME` VARCHAR(45) NULL,
  `LASTNAME` VARCHAR(45) NULL,
  `GENDER` CHAR(1) NULL DEFAULT 'M' COMMENT 'M male\nF Female',
  `BIRTH_DATE` DATE NULL,
  `CITY_ID` INT NULL COMMENT 'FK in CITIES',
  `USER_ID` INT NULL,
  PRIMARY KEY (`ID`),
  INDEX `LASTNAME_IDX` (`LASTNAME` ASC) INVISIBLE,
  INDEX `CITY_FK_idx` (`CITY_ID` ASC) VISIBLE,
  UNIQUE INDEX `USER_ID_UNIQUE` (`USER_ID` ASC) INVISIBLE,
  CONSTRAINT `CITY_FK`
    FOREIGN KEY (`CITY_ID`)
    REFERENCES `SchoolDBPro`.`CITIES` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `STUDENT_USER_FK`
    FOREIGN KEY (`USER_ID`)
    REFERENCES `SchoolDBPro`.`USERS` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SchoolDBPro`.`SPECIALITIES`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SchoolDBPro`.`SPECIALITIES` ;

CREATE TABLE IF NOT EXISTS `SchoolDBPro`.`SPECIALITIES` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `SPECIALITY` VARCHAR(45) NULL,
  PRIMARY KEY (`ID`),
  INDEX `SPECIALITY_IDX` (`SPECIALITY` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SchoolDBPro`.`TEACHERS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SchoolDBPro`.`TEACHERS` ;

CREATE TABLE IF NOT EXISTS `SchoolDBPro`.`TEACHERS` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `SSN` INT NULL,
  `FIRSTNAME` VARCHAR(45) NULL,
  `LASTNAME` VARCHAR(45) NULL,
  `SPECIALITY_ID` INT NULL COMMENT 'FK in SPECIALITIES TABLE',
  `USER_ID` INT NULL,
  UNIQUE INDEX `SSN_UNIQUE` (`SSN` ASC) VISIBLE,
  INDEX `LASTNAME_IDX` (`LASTNAME` ASC) VISIBLE,
  INDEX `SPECIALITY_FK_idx` (`SPECIALITY_ID` ASC) VISIBLE,
  UNIQUE INDEX `USER_ID_UNIQUE` (`USER_ID` ASC) VISIBLE,
  PRIMARY KEY (`ID`),
  CONSTRAINT `SPECIALITY_FK`
    FOREIGN KEY (`SPECIALITY_ID`)
    REFERENCES `SchoolDBPro`.`SPECIALITIES` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `TEACHER_USER_FK`
    FOREIGN KEY (`USER_ID`)
    REFERENCES `SchoolDBPro`.`USERS` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SchoolDBPro`.`MEETINGS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SchoolDBPro`.`MEETINGS` ;

CREATE TABLE IF NOT EXISTS `SchoolDBPro`.`MEETINGS` (
  `TEACHER_ID` INT NOT NULL,
  `STUDENT_ID` INT NOT NULL,
  `MEETING_ROOM` VARCHAR(45) NULL,
  `MEETING_DATE` DATETIME NULL,
  PRIMARY KEY (`TEACHER_ID`, `STUDENT_ID`),
  INDEX `STUDENTS_FK_idx` (`STUDENT_ID` ASC) VISIBLE,
  INDEX `DATE_IDX` (`MEETING_DATE` ASC) INVISIBLE,
  INDEX `ROOM_IDX` (`MEETING_ROOM` ASC) VISIBLE,
  CONSTRAINT `TEACHERS_FK`
    FOREIGN KEY (`TEACHER_ID`)
    REFERENCES `SchoolDBPro`.`TEACHERS` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `STUDENTS_FK`
    FOREIGN KEY (`STUDENT_ID`)
    REFERENCES `SchoolDBPro`.`STUDENTS` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `SchoolDBPro`;

DELIMITER $$

USE `SchoolDBPro`$$
DROP TRIGGER IF EXISTS `SchoolDBPro`.`STUDENTS_BEFORE_INSERT` $$
USE `SchoolDBPro`$$
CREATE DEFINER = CURRENT_USER TRIGGER `SchoolDBPro`.`STUDENTS_BEFORE_INSERT` 
BEFORE INSERT ON `STUDENTS` FOR EACH ROW
BEGIN
 IF NEW.BIRTH_DATE <= '1900-01-01' OR NEW.BIRTH_DATE >= CURDATE() THEN
    SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Invalid birth date';
  END IF;
END$$


USE `SchoolDBPro`$$
DROP TRIGGER IF EXISTS `SchoolDBPro`.`STUDENTS_BEFORE_UPDATE` $$
USE `SchoolDBPro`$$
CREATE DEFINER = CURRENT_USER TRIGGER `SchoolDBPro`.`STUDENTS_BEFORE_UPDATE` BEFORE UPDATE ON `STUDENTS` FOR EACH ROW
BEGIN
IF NEW.BIRTH_DATE <= '1900-01-01' OR NEW.BIRTH_DATE >= CURDATE() THEN
    SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Invalid birth date';
  END IF;
END$$


USE `SchoolDBPro`$$
DROP TRIGGER IF EXISTS `SchoolDBPro`.`MEETINGS_BEFORE_INSERT` $$
USE `SchoolDBPro`$$
CREATE DEFINER = CURRENT_USER TRIGGER `SchoolDBPro`.`MEETINGS_BEFORE_INSERT` BEFORE INSERT ON `MEETINGS` FOR EACH ROW
BEGIN
 IF NEW.MEETING_DATE <= CURDATE() THEN
    SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Invalid meeting date';
  END IF;
END$$


USE `SchoolDBPro`$$
DROP TRIGGER IF EXISTS `SchoolDBPro`.`MEETINGS_BEFORE_UPDATE` $$
USE `SchoolDBPro`$$
CREATE DEFINER = CURRENT_USER TRIGGER `SchoolDBPro`.`MEETINGS_BEFORE_UPDATE` BEFORE UPDATE ON `MEETINGS` FOR EACH ROW
BEGIN
 IF NEW.MEETING_DATE <= CURDATE() THEN
    SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Invalid meeting date';
  END IF;
END$$


DELIMITER ;
SET SQL_MODE = '';
DROP USER IF EXISTS schoolpro;
SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
CREATE USER 'schoolpro' IDENTIFIED BY '123456';

GRANT ALL ON `SchoolDBPro`.* TO 'schoolpro';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
